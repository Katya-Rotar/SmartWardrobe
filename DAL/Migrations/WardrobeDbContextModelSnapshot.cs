// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(WardrobeDbContext))]
    partial class WardrobeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Outerwear"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tops"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Bottoms"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Dresses"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Accessories"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClothingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<DateTime?>("LastWornDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_worn_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("TemperatureSuitabilityID")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_suitability_id");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clothing_items");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("ix_clothing_items_category_id");

                    b.HasIndex("TemperatureSuitabilityID")
                        .HasDatabaseName("ix_clothing_items_temperature_suitability_id");

                    b.HasIndex("TypeID")
                        .HasDatabaseName("ix_clothing_items_type_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_clothing_items_user_id");

                    b.ToTable("clothing_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            Color = "Blue",
                            ImageURL = "https://e7.pngegg.com/pngimages/324/140/png-clipart-blue-washed-denim-button-up-jacket-jean-jacket-denim-h-m-jeans-women-s-jackets-blue-women-accessories-thumbnail.png",
                            LastWornDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Blue Denim Jacket",
                            TemperatureSuitabilityID = 4,
                            TypeID = 1,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 2,
                            Color = "White",
                            ImageURL = "https://png.pngtree.com/png-clipart/20230930/original/pngtree-white-t-shirt-mockup-realistic-t-shirt-png-image_13020297.png",
                            LastWornDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "White T-Shirt",
                            TemperatureSuitabilityID = 5,
                            TypeID = 3,
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 3,
                            Color = "Black",
                            ImageURL = "https://www.pngpacks.com/uploads/data/2058/IMG_bbgqbicsmHvp.png",
                            LastWornDate = new DateTime(2025, 5, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Black Jeans",
                            TemperatureSuitabilityID = 4,
                            TypeID = 6,
                            UserID = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 4,
                            Color = "Yellow",
                            ImageURL = "https://e7.pngegg.com/pngimages/826/743/png-clipart-cocktail-dress-skirt-gown-dirndl-summer-clothes-fashion-party-dress-thumbnail.png",
                            Name = "Summer Dress",
                            TemperatureSuitabilityID = 5,
                            TypeID = 11,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClothingItemSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClothingItemID")
                        .HasColumnType("integer")
                        .HasColumnName("clothing_item_id");

                    b.Property<int>("SeasonID")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_clothing_item_seasons");

                    b.HasIndex("ClothingItemID")
                        .HasDatabaseName("ix_clothing_item_seasons_clothing_item_id");

                    b.HasIndex("SeasonID")
                        .HasDatabaseName("ix_clothing_item_seasons_season_id");

                    b.ToTable("clothing_item_seasons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothingItemID = 1,
                            SeasonID = 4
                        },
                        new
                        {
                            Id = 2,
                            ClothingItemID = 2,
                            SeasonID = 2
                        },
                        new
                        {
                            Id = 3,
                            ClothingItemID = 3,
                            SeasonID = 1
                        },
                        new
                        {
                            Id = 4,
                            ClothingItemID = 4,
                            SeasonID = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClothingItemStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClothingItemID")
                        .HasColumnType("integer")
                        .HasColumnName("clothing_item_id");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer")
                        .HasColumnName("style_id");

                    b.HasKey("Id")
                        .HasName("pk_clothing_item_styles");

                    b.HasIndex("ClothingItemID")
                        .HasDatabaseName("ix_clothing_item_styles_clothing_item_id");

                    b.HasIndex("StyleID")
                        .HasDatabaseName("ix_clothing_item_styles_style_id");

                    b.ToTable("clothing_item_styles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothingItemID = 1,
                            StyleID = 1
                        },
                        new
                        {
                            Id = 2,
                            ClothingItemID = 2,
                            StyleID = 3
                        },
                        new
                        {
                            Id = 3,
                            ClothingItemID = 3,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 4,
                            ClothingItemID = 4,
                            StyleID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ProfileID")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("PublicationID")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProfileID")
                        .HasDatabaseName("ix_comments_profile_id");

                    b.HasIndex("PublicationID")
                        .HasDatabaseName("ix_comments_publication_id");

                    b.ToTable("comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great outfit!",
                            CreatedAt = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProfileID = 1,
                            PublicationID = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Where did you get those shoes?",
                            CreatedAt = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProfileID = 2,
                            PublicationID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentID")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<int>("ProfileID")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("pk_comment_likes");

                    b.HasIndex("CommentID")
                        .HasDatabaseName("ix_comment_likes_comment_id");

                    b.HasIndex("ProfileID")
                        .HasDatabaseName("ix_comment_likes_profile_id");

                    b.ToTable("comment_likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentID = 1,
                            ProfileID = 2
                        },
                        new
                        {
                            Id = 3,
                            CommentID = 2,
                            ProfileID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("DressCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dress_code");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_events_outfit_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_events_user_id");

                    b.ToTable("events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            DressCode = "Formal",
                            Location = "Lviv",
                            Name = "Friend's Wedding",
                            OutfitID = 1,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DressCode = "Business Casual",
                            Location = "Kyiv",
                            Name = "Office Party",
                            OutfitID = 2,
                            UserID = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DressCode = "Casual",
                            Location = "Park",
                            Name = "Birthday Picnic",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FollowerID")
                        .HasColumnType("integer")
                        .HasColumnName("follower_id");

                    b.Property<int>("FollowingID")
                        .HasColumnType("integer")
                        .HasColumnName("following_id");

                    b.HasKey("Id")
                        .HasName("pk_followers");

                    b.HasIndex("FollowerID")
                        .HasDatabaseName("ix_followers_follower_id");

                    b.HasIndex("FollowingID")
                        .HasDatabaseName("ix_followers_following_id");

                    b.ToTable("followers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            FollowerID = 1,
                            FollowingID = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            FollowerID = 2,
                            FollowingID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("EventID")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("EventID")
                        .HasDatabaseName("ix_notifications_event_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventID = 1,
                            IsRead = false,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventID = 2,
                            IsRead = true,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Outfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TemperatureSuitabilityID")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_suitability_id");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_outfits");

                    b.HasIndex("TemperatureSuitabilityID")
                        .HasDatabaseName("ix_outfits_temperature_suitability_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_outfits_user_id");

                    b.ToTable("outfits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TemperatureSuitabilityID = 1,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            TemperatureSuitabilityID = 2,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group_name");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_groups");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_outfit_groups_user_id");

                    b.ToTable("outfit_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupName = "Casual Summer",
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            GroupName = "Formal Evening",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OutfitGroupID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_group_id");

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_group_items");

                    b.HasIndex("OutfitGroupID")
                        .HasDatabaseName("ix_outfit_group_items_outfit_group_id");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_outfit_group_items_outfit_id");

                    b.ToTable("outfit_group_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutfitGroupID = 1,
                            OutfitID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClothingItemID")
                        .HasColumnType("integer")
                        .HasColumnName("clothing_item_id");

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_items");

                    b.HasIndex("ClothingItemID")
                        .HasDatabaseName("ix_outfit_items_clothing_item_id");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_outfit_items_outfit_id");

                    b.ToTable("outfit_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothingItemID = 2,
                            OutfitID = 1
                        },
                        new
                        {
                            Id = 2,
                            ClothingItemID = 3,
                            OutfitID = 1
                        },
                        new
                        {
                            Id = 3,
                            ClothingItemID = 4,
                            OutfitID = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.Property<int>("SeasonID")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_seasons");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_outfit_seasons_outfit_id");

                    b.HasIndex("SeasonID")
                        .HasDatabaseName("ix_outfit_seasons_season_id");

                    b.ToTable("outfit_seasons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutfitID = 1,
                            SeasonID = 2
                        },
                        new
                        {
                            Id = 2,
                            OutfitID = 2,
                            SeasonID = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.Property<int>("StyleID")
                        .HasColumnType("integer")
                        .HasColumnName("style_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_styles");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_outfit_styles_outfit_id");

                    b.HasIndex("StyleID")
                        .HasDatabaseName("ix_outfit_styles_style_id");

                    b.ToTable("outfit_styles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutfitID = 1,
                            StyleID = 2
                        },
                        new
                        {
                            Id = 2,
                            OutfitID = 2,
                            StyleID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.OutfitTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.Property<int>("TagID")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_outfit_tags");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_outfit_tags_outfit_id");

                    b.HasIndex("TagID")
                        .HasDatabaseName("ix_outfit_tags_tag_id");

                    b.ToTable("outfit_tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutfitID = 1,
                            TagID = 1
                        },
                        new
                        {
                            Id = 2,
                            OutfitID = 1,
                            TagID = 3
                        },
                        new
                        {
                            Id = 3,
                            OutfitID = 2,
                            TagID = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileID")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("PublicationID")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.HasKey("Id")
                        .HasName("pk_post_likes");

                    b.HasIndex("ProfileID")
                        .HasDatabaseName("ix_post_likes_profile_id");

                    b.HasIndex("PublicationID")
                        .HasDatabaseName("ix_post_likes_publication_id");

                    b.ToTable("post_likes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProfileID = 1,
                            PublicationID = 1
                        },
                        new
                        {
                            Id = 2,
                            ProfileID = 2,
                            PublicationID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bio");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasDatabaseName("ix_profiles_user_id");

                    b.ToTable("profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Lover of vintage style and cozy sweaters.",
                            ProfileImage = "https://i.pinimg.com/564x/39/33/f6/3933f64de1724bb67264818810e3f2cb.jpg",
                            UserID = 1,
                            Username = "fashionlover123"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Streetwear is my passion.",
                            ProfileImage = "https://cdn.expertphotography.com/wp-content/uploads/2020/08/social-media-profile-photos.jpg",
                            UserID = 2,
                            Username = "Anna"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CommentingOptions")
                        .HasColumnType("boolean")
                        .HasColumnName("commenting_options");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("image_url");

                    b.Property<int>("OutfitID")
                        .HasColumnType("integer")
                        .HasColumnName("outfit_id");

                    b.Property<int>("ProfileID")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("pk_publications");

                    b.HasIndex("OutfitID")
                        .HasDatabaseName("ix_publications_outfit_id");

                    b.HasIndex("ProfileID")
                        .HasDatabaseName("ix_publications_profile_id");

                    b.ToTable("publications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentingOptions = true,
                            ImageURL = "https://fashionjackson.com/wp-content/uploads/2017/06/Fashion-Jackson-Everlane-White-Tshirt-Zara-Ripped-Black-Skinny-Jeans.jpg",
                            OutfitID = 1,
                            ProfileID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.PublicationTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PublicationID")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<int>("TagID")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_publication_tags");

                    b.HasIndex("PublicationID")
                        .HasDatabaseName("ix_publication_tags_publication_id");

                    b.HasIndex("TagID")
                        .HasDatabaseName("ix_publication_tags_tag_id");

                    b.ToTable("publication_tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublicationID = 1,
                            TagID = 2
                        },
                        new
                        {
                            Id = 2,
                            PublicationID = 1,
                            TagID = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.SavedPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileID")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("PublicationID")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.HasKey("Id")
                        .HasName("pk_saved_posts");

                    b.HasIndex("ProfileID")
                        .HasDatabaseName("ix_saved_posts_profile_id");

                    b.HasIndex("PublicationID")
                        .HasDatabaseName("ix_saved_posts_publication_id");

                    b.ToTable("saved_posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProfileID = 1,
                            PublicationID = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("season_name");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.ToTable("seasons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SeasonName = "Spring"
                        },
                        new
                        {
                            Id = 2,
                            SeasonName = "Summer"
                        },
                        new
                        {
                            Id = 3,
                            SeasonName = "Autumn"
                        },
                        new
                        {
                            Id = 4,
                            SeasonName = "Winter"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("style_name");

                    b.HasKey("Id")
                        .HasName("pk_styles");

                    b.ToTable("styles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StyleName = "Casual"
                        },
                        new
                        {
                            Id = 2,
                            StyleName = "Formal"
                        },
                        new
                        {
                            Id = 3,
                            StyleName = "Sporty"
                        },
                        new
                        {
                            Id = 4,
                            StyleName = "Party"
                        },
                        new
                        {
                            Id = 5,
                            StyleName = "Vintage"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tag_name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagName = "Casual"
                        },
                        new
                        {
                            Id = 2,
                            TagName = "Formal"
                        },
                        new
                        {
                            Id = 3,
                            TagName = "Summer"
                        },
                        new
                        {
                            Id = 4,
                            TagName = "Winter"
                        },
                        new
                        {
                            Id = 5,
                            TagName = "Athletic"
                        });
                });

            modelBuilder.Entity("DAL.Entities.TemperatureSuitability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TemperatureSuitabilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("temperature_suitability_name");

                    b.HasKey("Id")
                        .HasName("pk_temperature_suitabilities");

                    b.ToTable("temperature_suitabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TemperatureSuitabilityName = "Extra could (-30 to -20)"
                        },
                        new
                        {
                            Id = 2,
                            TemperatureSuitabilityName = "Very cold (-20 to -10)"
                        },
                        new
                        {
                            Id = 3,
                            TemperatureSuitabilityName = "Cold (-10 to 0)"
                        },
                        new
                        {
                            Id = 4,
                            TemperatureSuitabilityName = "Chilly (0 to +10)"
                        },
                        new
                        {
                            Id = 5,
                            TemperatureSuitabilityName = "Warm (+10 to +20)"
                        },
                        new
                        {
                            Id = 6,
                            TemperatureSuitabilityName = "Hot (+20 to +30)"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_types");

                    b.ToTable("types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Jacket"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Coat"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "T-Shirt"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Blouse"
                        },
                        new
                        {
                            Id = 5,
                            TypeName = "Sweatshirt"
                        },
                        new
                        {
                            Id = 6,
                            TypeName = "Jeans"
                        },
                        new
                        {
                            Id = 7,
                            TypeName = "Trousers"
                        },
                        new
                        {
                            Id = 8,
                            TypeName = "Shorts"
                        },
                        new
                        {
                            Id = 9,
                            TypeName = "Evening Dress"
                        },
                        new
                        {
                            Id = 10,
                            TypeName = "Casual Dress"
                        },
                        new
                        {
                            Id = 11,
                            TypeName = "Sundress"
                        },
                        new
                        {
                            Id = 12,
                            TypeName = "Sneakers"
                        },
                        new
                        {
                            Id = 13,
                            TypeName = "Boots"
                        },
                        new
                        {
                            Id = 14,
                            TypeName = "Heels"
                        });
                });

            modelBuilder.Entity("DAL.Entities.TypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("TypeID")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_type_categories");

                    b.HasIndex("CategoryID")
                        .HasDatabaseName("ix_type_categories_category_id");

                    b.HasIndex("TypeID")
                        .HasDatabaseName("ix_type_categories_type_id");

                    b.ToTable("type_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            TypeID = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 1,
                            TypeID = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 2,
                            TypeID = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 2,
                            TypeID = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 2,
                            TypeID = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryID = 3,
                            TypeID = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryID = 3,
                            TypeID = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryID = 3,
                            TypeID = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryID = 4,
                            TypeID = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryID = 4,
                            TypeID = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryID = 4,
                            TypeID = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryID = 5,
                            TypeID = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryID = 5,
                            TypeID = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryID = 5,
                            TypeID = 14
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "katya@gmail.com",
                            PasswordHash = "katyaPassword",
                            ProfileImage = "https://i.pinimg.com/564x/39/33/f6/3933f64de1724bb67264818810e3f2cb.jpg",
                            Role = "Premium",
                            Username = "Katya"
                        },
                        new
                        {
                            Id = 2,
                            Email = "anna@gmail.com",
                            PasswordHash = "AnnaPassword",
                            ProfileImage = "https://cdn.expertphotography.com/wp-content/uploads/2020/08/social-media-profile-photos.jpg",
                            Role = "User",
                            Username = "Anna"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Admin@gmail.com",
                            PasswordHash = "Admin",
                            Role = "Admin",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClothingItem", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("ClothingItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_items_categories_category_id");

                    b.HasOne("DAL.Entities.TemperatureSuitability", "TemperatureSuitability")
                        .WithMany("ClothingItems")
                        .HasForeignKey("TemperatureSuitabilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_items_temperature_suitabilities_temperature_suitab");

                    b.HasOne("DAL.Entities.Type", "Type")
                        .WithMany("ClothingItems")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_items_types_type_id");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ClothingItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_items_users_user_id");

                    b.Navigation("Category");

                    b.Navigation("TemperatureSuitability");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ClothingItemSeason", b =>
                {
                    b.HasOne("DAL.Entities.ClothingItem", "ClothingItem")
                        .WithMany("Seasons")
                        .HasForeignKey("ClothingItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_item_seasons_clothing_items_clothing_item_id");

                    b.HasOne("DAL.Entities.Season", "Season")
                        .WithMany("ClothingItemSeasons")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_item_seasons_seasons_season_id");

                    b.Navigation("ClothingItem");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DAL.Entities.ClothingItemStyle", b =>
                {
                    b.HasOne("DAL.Entities.ClothingItem", "ClothingItem")
                        .WithMany("Styles")
                        .HasForeignKey("ClothingItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_item_styles_clothing_items_clothing_item_id");

                    b.HasOne("DAL.Entities.Style", "Style")
                        .WithMany("ClothingItems")
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clothing_item_styles_styles_style_id");

                    b.Navigation("ClothingItem");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.HasOne("DAL.Entities.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_profiles_profile_id");

                    b.HasOne("DAL.Entities.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_publications_publication_id");

                    b.Navigation("Profile");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("DAL.Entities.CommentLike", b =>
                {
                    b.HasOne("DAL.Entities.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_likes_comments_comment_id");

                    b.HasOne("DAL.Entities.Profile", "Profile")
                        .WithMany("CommentLikes")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_likes_profiles_profile_id");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Events")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_events_outfits_outfit_id");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_users_user_id");

                    b.Navigation("Outfit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Follower", b =>
                {
                    b.HasOne("DAL.Entities.Profile", "FollowerProfile")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_followers_profiles_follower_id");

                    b.HasOne("DAL.Entities.Profile", "FollowingProfile")
                        .WithMany("Following")
                        .HasForeignKey("FollowingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_followers_profiles_following_id");

                    b.Navigation("FollowerProfile");

                    b.Navigation("FollowingProfile");
                });

            modelBuilder.Entity("DAL.Entities.Notification", b =>
                {
                    b.HasOne("DAL.Entities.Event", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_events_event_id");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Outfit", b =>
                {
                    b.HasOne("DAL.Entities.TemperatureSuitability", "TemperatureSuitability")
                        .WithMany("Outfits")
                        .HasForeignKey("TemperatureSuitabilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfits_temperature_suitabilities_temperature_suitability_id");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Outfits")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfits_users_user_id");

                    b.Navigation("TemperatureSuitability");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.OutfitGroup", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("OutfitGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_groups_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.OutfitGroupItem", b =>
                {
                    b.HasOne("DAL.Entities.OutfitGroup", "OutfitGroup")
                        .WithMany("OutfitGroups")
                        .HasForeignKey("OutfitGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_group_items_outfit_groups_outfit_group_id");

                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("GroupItems")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_group_items_outfits_outfit_id");

                    b.Navigation("Outfit");

                    b.Navigation("OutfitGroup");
                });

            modelBuilder.Entity("DAL.Entities.OutfitItem", b =>
                {
                    b.HasOne("DAL.Entities.ClothingItem", "ClothingItem")
                        .WithMany("Outfits")
                        .HasForeignKey("ClothingItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_items_clothing_items_clothing_item_id");

                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Items")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_items_outfits_outfit_id");

                    b.Navigation("ClothingItem");

                    b.Navigation("Outfit");
                });

            modelBuilder.Entity("DAL.Entities.OutfitSeason", b =>
                {
                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Seasons")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_seasons_outfits_outfit_id");

                    b.HasOne("DAL.Entities.Season", "Season")
                        .WithMany("OutfitSeasons")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_seasons_seasons_season_id");

                    b.Navigation("Outfit");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DAL.Entities.OutfitStyle", b =>
                {
                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Styles")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_styles_outfits_outfit_id");

                    b.HasOne("DAL.Entities.Style", "Style")
                        .WithMany("Styles")
                        .HasForeignKey("StyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_styles_styles_style_id");

                    b.Navigation("Outfit");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("DAL.Entities.OutfitTag", b =>
                {
                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Tags")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_tags_outfits_outfit_id");

                    b.HasOne("DAL.Entities.Tag", "Tag")
                        .WithMany("Tags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outfit_tags_tags_tag_id");

                    b.Navigation("Outfit");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DAL.Entities.PostLike", b =>
                {
                    b.HasOne("DAL.Entities.Profile", "Profile")
                        .WithMany("PostLikes")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_likes_profiles_profile_id");

                    b.HasOne("DAL.Entities.Publication", "Publication")
                        .WithMany("PostLikes")
                        .HasForeignKey("PublicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_likes_publications_publication_id");

                    b.Navigation("Profile");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("DAL.Entities.Profile", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("DAL.Entities.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Publication", b =>
                {
                    b.HasOne("DAL.Entities.Outfit", "Outfit")
                        .WithMany("Publications")
                        .HasForeignKey("OutfitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publications_outfits_outfit_id");

                    b.HasOne("DAL.Entities.Profile", "Profile")
                        .WithMany("Publications")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publications_profiles_profile_id");

                    b.Navigation("Outfit");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DAL.Entities.PublicationTag", b =>
                {
                    b.HasOne("DAL.Entities.Publication", "Publication")
                        .WithMany("PublicationTags")
                        .HasForeignKey("PublicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_tags_publications_publication_id");

                    b.HasOne("DAL.Entities.Tag", "Tag")
                        .WithMany("PublicationTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_tags_tags_tag_id");

                    b.Navigation("Publication");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DAL.Entities.SavedPost", b =>
                {
                    b.HasOne("DAL.Entities.Profile", "Profile")
                        .WithMany("SavedPosts")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saved_posts_profiles_profile_id");

                    b.HasOne("DAL.Entities.Publication", "Publication")
                        .WithMany("SavedPosts")
                        .HasForeignKey("PublicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saved_posts_publications_publication_id");

                    b.Navigation("Profile");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("DAL.Entities.TypeCategory", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("TypeCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_type_categories_categories_category_id");

                    b.HasOne("DAL.Entities.Type", "Type")
                        .WithMany("TypeCategories")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_type_categories_types_type_id");

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("ClothingItems");

                    b.Navigation("TypeCategories");
                });

            modelBuilder.Entity("DAL.Entities.ClothingItem", b =>
                {
                    b.Navigation("Outfits");

                    b.Navigation("Seasons");

                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("DAL.Entities.Event", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DAL.Entities.Outfit", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("GroupItems");

                    b.Navigation("Items");

                    b.Navigation("Publications");

                    b.Navigation("Seasons");

                    b.Navigation("Styles");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DAL.Entities.OutfitGroup", b =>
                {
                    b.Navigation("OutfitGroups");
                });

            modelBuilder.Entity("DAL.Entities.Profile", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("PostLikes");

                    b.Navigation("Publications");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("DAL.Entities.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");

                    b.Navigation("PublicationTags");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("DAL.Entities.Season", b =>
                {
                    b.Navigation("ClothingItemSeasons");

                    b.Navigation("OutfitSeasons");
                });

            modelBuilder.Entity("DAL.Entities.Style", b =>
                {
                    b.Navigation("ClothingItems");

                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DAL.Entities.Tag", b =>
                {
                    b.Navigation("PublicationTags");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DAL.Entities.TemperatureSuitability", b =>
                {
                    b.Navigation("ClothingItems");

                    b.Navigation("Outfits");
                });

            modelBuilder.Entity("DAL.Entities.Type", b =>
                {
                    b.Navigation("ClothingItems");

                    b.Navigation("TypeCategories");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("ClothingItems");

                    b.Navigation("Events");

                    b.Navigation("Notifications");

                    b.Navigation("OutfitGroups");

                    b.Navigation("Outfits");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
